// 混合可以调用自身，再结合Guard条件表达式，就可以写出循环结构
// 如生成栅格系统的CSS
.generate-columns(4);
.generate-columns(@n, @i: 1) when (@i <= @n) {
  .column-@{i} {
    width: (@i * 100% / @n);
  }
  .generate-columns(@n, (@i + 1));
}
// .column-1 {
//     width: 25%;
// }
// .column-2 {
//     width: 50%;
// }
// .column-3 {
//     width: 75%;
// }
// .column-4 {
//     width: 100%;
// }


.loop(@counter) when (@counter > 0) {
	.loop((@counter - 1)); // 递归调用自身 4 3 2 1 0
	width: (10px * @counter); // 每次调用时产生的样式代码 50px 40px 30px 20px 10px
}
div {
	.loop(5); // 调用循环
}
// div {
//   width: 10px;
//   width: 20px;
//   width: 30px;
//   width: 40px;
//   width: 50px;
// }